import MaiarAppStrategy from './maiar-app/MaiarAppStrategy';
import LedgerStrategy from './ledger/LedgerStrategy';
import WebWalletStrategy from './web/WebWalletStrategy';
import { Address, Transaction } from "@elrondnetwork/erdjs";
import type { ApiNetworkProvider, ProxyNetworkProvider } from "@elrondnetwork/erdjs-network-providers";
import providersOptions, { ProviderOption } from "./config";
import type IProviderStrategyEventHandler from "./IProviderStrategyEventHandler";
import type IProviderStrategy from "./IProviderStrategy";
import DefiWallet from "./defi/DefiWalletStrategy";
declare class Providers implements IProviderStrategyEventHandler {
    currentStrategy?: IProviderStrategy;
    private onLogin;
    private onLogout;
    private onTransaction;
    private _maiarApp;
    private _ledger;
    private _webWallet;
    private _defiWallet;
    private initialised;
    private _proxy;
    private _api;
    private _networkConfig;
    constructor(proxy: ProxyNetworkProvider, api: ApiNetworkProvider, options: ProviderOption, onLogin: Function, onLogout: Function, onTransaction: Function);
    init(): Promise<void>;
    onUrl(url: Location): void;
    get currentProvider(): IProviderStrategy | undefined;
    get currentProviderName(): string | undefined;
    get ledger(): LedgerStrategy;
    get maiarApp(): MaiarAppStrategy;
    get webWallet(): WebWalletStrategy;
    get defiWallet(): DefiWallet;
    get proxy(): ProxyNetworkProvider;
    get api(): ApiNetworkProvider;
    get chainID(): string;
    logout(): void;
    sendAndWatch(transaction: Transaction): Promise<void>;
    signAndSend(transaction: Transaction): Promise<string | Transaction>;
    transactionResult(transaction: Transaction, pollingInterval?: number, timeout?: number): Promise<void>;
    handleLoginStart(provider: IProviderStrategy): void;
    handleLogin(provider: IProviderStrategy, address: Address, token?: string): void;
    handleLoginError(provider: IProviderStrategy, err: Error): void;
    handleLogout(provider: IProviderStrategy): void;
    handleTransaction(transaction: {
        status: string;
        txHash: string;
    }): void;
}
export { providersOptions };
export default Providers;
